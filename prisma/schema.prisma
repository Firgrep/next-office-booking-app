// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    subscribed    DateTime?
    role          Role      @default(BASIC)
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]

    stripeCustomerId       String?   @unique
    stripeSubscriptionId   String?   @unique
    stripePriceId          String?
    stripeCurrentPeriodEnd DateTime?

    pendingStripeSession PendingStripeSession?
}

enum Role {
    BASIC
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id          String    @id @default(cuid())
    name        String
    capacity    Int
    interval    Int
    openingTime Int
    closingTime Int
    description String?
    bookings    Booking[]
}

model Booking {
    id                   String                @id @default(cuid())
    userId               String
    startTime            DateTime
    endTime              DateTime
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    user                 User                  @relation(fields: [userId], references: [id])
    room                 Room                  @relation(fields: [roomId], references: [id])
    roomId               String
    pendingStripeSession PendingStripeSession?
    paymentIntentId      String?               @unique

    @@unique([roomId, startTime, endTime])
}

model PendingStripeSession {
    id            String   @id @default(cuid())
    stripeSession String   @unique
    createdAt     DateTime @default(now())
    productId     String?

    userId    String  @unique
    bookingId String  @unique
    user      User    @relation(fields: [userId], references: [id])
    booking   Booking @relation(fields: [bookingId], references: [id])
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}
